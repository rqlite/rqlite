name: docker-release-build-and-push

on:
  release:
    types:
      - created

env:
  REGISTRY_IMAGE: rqlite/rqlite

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm64
          - linux/arm/v6
          - linux/arm/v7
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            VERSION=${{ github.event.release.tag_name }}
            COMMIT=${{ github.sha }}
            BRANCH=master
            DATE=${{ github.event.created_at }}
      
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    # Add permissions so GITHUB_TOKEN can push to GHCR
    permissions:
      contents: read
      packages: write
    steps:
      - name: Get and strip version tag
        run: |
            VERSION=${{ github.event.release.tag_name }}
            echo "STRIPPED_VERSION=${VERSION#v}" >> $GITHUB_ENV

      - name: Compute image names
        run: |
          owner=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "DH_IMAGE=docker.io/${{ env.REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "GHCR_IMAGE=ghcr.io/${owner}/rqlite" >> $GITHUB_ENV

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # New: login to GHCR using GITHUB_TOKEN
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Docker Hub manifests
        working-directory: /tmp/digests
        run: |
          # Tags: latest and vX.Y.Z (without the leading 'v' in your current scheme)
          docker buildx imagetools create \
            -t ${{ env.DH_IMAGE }}:latest \
            -t ${{ env.DH_IMAGE }}:${{ env.STRIPPED_VERSION }} \
            $(printf '${{ env.DH_IMAGE }}@sha256:%s ' *)

      # New: Copy the same digests into GHCR and tag them identically
      - name: Create GHCR manifests (copy from Docker Hub)
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.GHCR_IMAGE }}:latest \
            -t ${{ env.GHCR_IMAGE }}:${{ env.STRIPPED_VERSION }} \
            $(printf '${{ env.DH_IMAGE }}@sha256:%s ' *)
