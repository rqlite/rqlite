// Code generated by go generate; DO NOT EDIT.
package main

import (
	"flag"
	"fmt"
	"strings"
	"time"
)

// StringSlice wraps a string slice and implements the flag.Value interface.
type StringSliceValue struct {
	ss *[]string
}

func NewStringSliceValue(ss *[]string) *StringSliceValue {
	return &StringSliceValue{ss}
}

// String returns a string representation of the StringSliceValue.
func (s *StringSliceValue) String() string {
	return fmt.Sprintf("%v", *s.ss)
}

// Set sets the value of the StringSliceValue.
func (s *StringSliceValue) Set(value string) error {
	ss := strings.Split(value, ",")
	*s.ss = ss
	return nil
}

// Config represents all configuration options.
type Config struct {
	// DataPath is path to node data. Always set
	DataPath string
	// Comma-delimited list of paths to directories, zipfiles, or tar.gz files containing SQLite extensions
	ExtensionPaths []string
	// HTTP server bind address. To enable HTTPS, set X.509 certificate and key
	HTTPAddr string
	// Advertised HTTP server network address If not set, same as HTTP server bind address
	HTTPAdv string
	// Value to set for Access-Control-Allow-Origin HTTP header
	HTTPAllowOrigin string
	// Path to the authentication file. If not set, authentication is not enabled
	AuthFile string
	// Path to the auto-backup file. If not set, automatic backup is not enabled
	AutoBackupFile string
	// Path to the auto-restore file. If not set, automatic restore is not enabled
	AutoRestoreFile string
	// Path to the CA certificate file for HTTPS communications
	HTTPx509CACert string
	// Path to the X509 certificate for the HTTPS server. If not set HTTPS is not enabled
	HTTPx509Cert string
	// Path to the private key for the HTTPS server
	HTTPx509Key string
	// Whether the HTTP server should verify client X509 certificates
	HTTPVerifyClient bool
	// Path to the CA certificate file for inter-node communications. May not be set
	NodeX509CACert string
	// Path to the X509 certificate for inter-node communications
	NodeX509Cert string
	// Path to the X509 key for inter-node communications
	NodeX509Key string
	// Disables checking other nodes' X509 certificates for validity. Checking is enabled by default
	NoNodeVerify bool
	// Enable mutual TLS for node-to-node communication. Disabled by default
	NodeVerifyClient bool
	// Hostname to verify on certificates returned by nodes
	NodeVerifyServerName string
	// Unique Raft ID for the node. If not set, defaults to the advertised Raft address
	NodeID string
	// Bind network address for the Raft server in the form address:port
	RaftAddr string
	// Advertised Raft server address. If not set, same as Raft server bind address
	RaftAdv string
	// List of Raft addresses to use for a join attempt. Comma-delimited list of nodes in host:port format
	JoinAddrs string
	// Number of times a node should attempt to join a cluster using a given address
	JoinAttempts int
	// Time between retrying failed join operations
	JoinInterval time.Duration
	// User to perform join attempts as. If not set, joins anonymously
	JoinAs string
	// Minimum number of nodes required for a bootstrap
	BootstrapExpect int
	// Maximum time a bootstrap operation can take
	BootstrapExpectTimeout time.Duration
	// Discovery mode. If not set, no node discovery is performed
	DiscoMode string
	// Discovery prefix key
	DiscoKey string
	// Path to Discovery configuration file. May not be set.
	DiscoConfig string
	// Path to the SQLite on-disk database file. If not set, uses a file in the data directory.
	OnDiskPath string
	// Enable SQLite foreign key constraints
	FKConstraints bool
	// Automatic VACUUM interval. Use 0s to disable. If not set, automatic VACUUM is not enabled
	AutoVacInterval time.Duration
	// Automatic optimization interval. Use 0h to disable
	AutoOptimizeInterval time.Duration
	// Minimum logging level for the Raft subsystem
	RaftLogLevel string
	// Configure as a non-voting node
	RaftNonVoter bool
	// Number of outstanding log entries that trigger a snapshot
	RaftSnapThreshold uint64
	// Size of a SQLite WAL file which triggers a snapshot.Set to 0 to disable
	RaftSnapThresholdWALSize uint64
	// Snapshot threshold check interval
	RaftSnapInterval time.Duration
	// Leader lease timeout. Use 0s for Raft default
	RaftLeaderLeaseTimeout time.Duration
	// Heartbeat timeout for Raft consensus
	RaftHeartbeatTimeout time.Duration
	// Election timeout for Raft consensus
	RaftElectionTimeout time.Duration
	// Log-apply timeout
	RaftApplyTimeout time.Duration
	// Shutdown Raft if the node is removed from the cluster
	RaftShutdownOnRemove bool
	// Node removes itself from the cluster on shutdown
	RaftClusterRemoveOnShutdown bool
	// Relinquish leadership on shutdown
	RaftStepdownOnShutdown bool
	// Duration after which a non-reachable voting node is reaped. If not set, no reaping takes place
	RaftReapNodeTimeout time.Duration
	// Duration after which a non-reachable non-voting node is reaped. If not set, no reaping takes place
	RaftReapReadOnlyNodeTimeout time.Duration
	// Timeout when connecting to another node in the cluster
	ClusterConnectTimeout time.Duration
	// Default capacity of execute queues
	WriteQueueCap int
	// Default batch size for execute queues
	WriteQueueBatchSz int
	// Time after which internally queued Queued Writes will be sent on if the batch size isn't reached
	WriteQueueTimeout time.Duration
	// Use a transaction when executing a Queued Write batch
	WriteQueueTx bool
	// Write CPU profie information to a file at this path
	CPUProfile string
	// Write memory profie information to a file at this path
	MemProfile string
	// Write trace profie information to a file at this path
	TraceProfile string
}

// Forge sets up and parses command-line flags.
func Forge(arguments []string) (*flag.FlagSet, *Config, error) {
	config := &Config{}
	fs := flag.NewFlagSet("rqlited", flag.ExitOnError)
	if len(arguments) < 0 {
		return nil, nil, fmt.Errorf("missing required argument: DataPath")
	}
	config.DataPath = arguments[0]
	fs.Var(NewStringSliceValue(config.ExtensionPaths), "extensions-path", "Comma-delimited list of paths to directories, zipfiles, or tar.gz files containing SQLite extensions")
	fs.StringVar(&config.HTTPAddr, "http-addr", "localhost:4001", "HTTP server bind address. To enable HTTPS, set X.509 certificate and key")
	fs.StringVar(&config.HTTPAdv, "http-adv-addr", "", "Advertised HTTP server network address If not set, same as HTTP server bind address")
	fs.StringVar(&config.HTTPAllowOrigin, "http-allow-origin", "", "Value to set for Access-Control-Allow-Origin HTTP header")
	fs.StringVar(&config.AuthFile, "auth", "", "Path to the authentication file. If not set, authentication is not enabled")
	fs.StringVar(&config.AutoBackupFile, "auto-backup", "", "Path to the auto-backup file. If not set, automatic backup is not enabled")
	fs.StringVar(&config.AutoRestoreFile, "auto-restore", "", "Path to the auto-restore file. If not set, automatic restore is not enabled")
	fs.StringVar(&config.HTTPx509CACert, "http-ca-cert", "", "Path to the CA certificate file for HTTPS communications")
	fs.StringVar(&config.HTTPx509Cert, "http-cert", "", "Path to the X509 certificate for the HTTPS server. If not set HTTPS is not enabled")
	fs.StringVar(&config.HTTPx509Key, "http-key", "", "Path to the private key for the HTTPS server")
	fs.BoolVar(&config.HTTPVerifyClient, "http-verify-client", false, "Whether the HTTP server should verify client X509 certificates")
	fs.StringVar(&config.NodeX509CACert, "node-ca-cert", "", "Path to the CA certificate file for inter-node communications. May not be set")
	fs.StringVar(&config.NodeX509Cert, "node-cert", "", "Path to the X509 certificate for inter-node communications")
	fs.StringVar(&config.NodeX509Key, "node-key", "", "Path to the X509 key for inter-node communications")
	fs.BoolVar(&config.NoNodeVerify, "node-no-verify", false, "Disables checking other nodes' X509 certificates for validity. Checking is enabled by default")
	fs.BoolVar(&config.NodeVerifyClient, "node-verify-client", false, "Enable mutual TLS for node-to-node communication. Disabled by default")
	fs.StringVar(&config.NodeVerifyServerName, "node-verify-server-name", "", "Hostname to verify on certificates returned by nodes")
	fs.StringVar(&config.NodeID, "node-id", "", "Unique Raft ID for the node. If not set, defaults to the advertised Raft address")
	fs.StringVar(&config.RaftAddr, "raft-addr", "localhost:4002", "Bind network address for the Raft server in the form address:port")
	fs.StringVar(&config.RaftAdv, "raft-adv-addr", "", "Advertised Raft server address. If not set, same as Raft server bind address")
	fs.StringVar(&config.JoinAddrs, "join", "", "List of Raft addresses to use for a join attempt. Comma-delimited list of nodes in host:port format")
	fs.IntVar(&config.JoinAttempts, "join-attempts", 5, "Number of times a node should attempt to join a cluster using a given address")
	fs.DurationVar(&config.JoinInterval, "join-interval", mustParseDuration("3s"), "Time between retrying failed join operations")
	fs.StringVar(&config.JoinAs, "join-as", "", "User to perform join attempts as. If not set, joins anonymously")
	fs.IntVar(&config.BootstrapExpect, "bootstrap-expect", 0, "Minimum number of nodes required for a bootstrap")
	fs.DurationVar(&config.BootstrapExpectTimeout, "bootstrap-expect-timeout", mustParseDuration("120s"), "Maximum time a bootstrap operation can take")
	fs.StringVar(&config.DiscoMode, "disco-mode", "", "Discovery mode. If not set, no node discovery is performed")
	fs.StringVar(&config.DiscoKey, "disco-key", "rqlite", "Discovery prefix key")
	fs.StringVar(&config.DiscoConfig, "disco-config", "", "Path to Discovery configuration file. May not be set.")
	fs.StringVar(&config.OnDiskPath, "on-disk-path", "", "Path to the SQLite on-disk database file. If not set, uses a file in the data directory.")
	fs.BoolVar(&config.FKConstraints, "fk", false, "Enable SQLite foreign key constraints")
	fs.DurationVar(&config.AutoVacInterval, "auto-vacuum-int", mustParseDuration("0s"), "Automatic VACUUM interval. Use 0s to disable. If not set, automatic VACUUM is not enabled")
	fs.DurationVar(&config.AutoOptimizeInterval, "auto-optimize-int", mustParseDuration("24h"), "Automatic optimization interval. Use 0h to disable")
	fs.StringVar(&config.RaftLogLevel, "raft-log-level", "WARN", "Minimum logging level for the Raft subsystem")
	fs.BoolVar(&config.RaftNonVoter, "raft-non-voter", false, "Configure as a non-voting node")
	fs.DurationVar(&config.RaftSnapInterval, "raft-snap-int", mustParseDuration("10s"), "Snapshot threshold check interval")
	fs.DurationVar(&config.RaftLeaderLeaseTimeout, "raft-leader-lease-timeout", mustParseDuration("0s"), "Leader lease timeout. Use 0s for Raft default")
	fs.DurationVar(&config.RaftHeartbeatTimeout, "raft-timeout", mustParseDuration("1s"), "Heartbeat timeout for Raft consensus")
	fs.DurationVar(&config.RaftElectionTimeout, "raft-election-timeout", mustParseDuration("1s"), "Election timeout for Raft consensus")
	fs.DurationVar(&config.RaftApplyTimeout, "raft-apply-timeout", mustParseDuration("10s"), "Log-apply timeout")
	fs.BoolVar(&config.RaftShutdownOnRemove, "raft-remove-shutdown", false, "Shutdown Raft if the node is removed from the cluster")
	fs.BoolVar(&config.RaftClusterRemoveOnShutdown, "raft-cluster-remove-shutdown", false, "Node removes itself from the cluster on shutdown")
	fs.BoolVar(&config.RaftStepdownOnShutdown, "raft-shutdown-stepdown", true, "Relinquish leadership on shutdown")
	fs.DurationVar(&config.RaftReapNodeTimeout, "raft-reap-node-timeout", mustParseDuration("0h"), "Duration after which a non-reachable voting node is reaped. If not set, no reaping takes place")
	fs.DurationVar(&config.RaftReapReadOnlyNodeTimeout, "raft-reap-read-only-node-timeout", mustParseDuration("0h"), "Duration after which a non-reachable non-voting node is reaped. If not set, no reaping takes place")
	fs.DurationVar(&config.ClusterConnectTimeout, "cluster-connect-timeout", mustParseDuration("30s"), "Timeout when connecting to another node in the cluster")
	fs.IntVar(&config.WriteQueueCap, "write-queue-capacity", 1024, "Default capacity of execute queues")
	fs.IntVar(&config.WriteQueueBatchSz, "write-queue-batch-size", 128, "Default batch size for execute queues")
	fs.DurationVar(&config.WriteQueueTimeout, "write-queue-timeout", mustParseDuration("50ms"), "Time after which internally queued Queued Writes will be sent on if the batch size isn't reached")
	fs.BoolVar(&config.WriteQueueTx, "write-queue-tx", false, "Use a transaction when executing a Queued Write batch")
	fs.StringVar(&config.CPUProfile, "cpu-profile", "", "Write CPU profie information to a file at this path")
	fs.StringVar(&config.MemProfile, "mem-profile", "", "Write memory profie information to a file at this path")
	fs.StringVar(&config.TraceProfile, "trace-profile", "", "Write trace profie information to a file at this path")
	if err := fs.Parse(arguments); err != nil {
		return nil, nil, err
	}
	return fs, config, nil
}

func mustParseDuration(d string) time.Duration {
	td, err := time.ParseDuration(d)
	if err != nil {
		panic(err)
	}
	return td
}
